"""Metadata generation logic for source distributions.
"""

import os

<<<<<<< HEAD
from pip._vendor.pyproject_hooks import BuildBackendHookCaller

from pip._internal.build_env import BuildEnvironment
from pip._internal.exceptions import (
    InstallationSubprocessError,
    MetadataGenerationFailed,
)
=======
from pip._vendor.pep517.wrappers import Pep517HookCaller

from pip._internal.build_env import BuildEnvironment
>>>>>>> back
from pip._internal.utils.subprocess import runner_with_spinner_message
from pip._internal.utils.temp_dir import TempDirectory


<<<<<<< HEAD
def generate_metadata(
    build_env: BuildEnvironment, backend: BuildBackendHookCaller, details: str
) -> str:
=======
def generate_metadata(build_env, backend):
    # type: (BuildEnvironment, Pep517HookCaller) -> str
>>>>>>> back
    """Generate metadata using mechanisms described in PEP 517.

    Returns the generated metadata directory.
    """
<<<<<<< HEAD
    metadata_tmpdir = TempDirectory(kind="modern-metadata", globally_managed=True)
=======
    metadata_tmpdir = TempDirectory(
        kind="modern-metadata", globally_managed=True
    )
>>>>>>> back

    metadata_dir = metadata_tmpdir.path

    with build_env:
<<<<<<< HEAD
        # Note that BuildBackendHookCaller implements a fallback for
        # prepare_metadata_for_build_wheel, so we don't have to
        # consider the possibility that this hook doesn't exist.
        runner = runner_with_spinner_message("Preparing metadata (pyproject.toml)")
        with backend.subprocess_runner(runner):
            try:
                distinfo_dir = backend.prepare_metadata_for_build_wheel(metadata_dir)
            except InstallationSubprocessError as error:
                raise MetadataGenerationFailed(package_details=details) from error
=======
        # Note that Pep517HookCaller implements a fallback for
        # prepare_metadata_for_build_wheel, so we don't have to
        # consider the possibility that this hook doesn't exist.
        runner = runner_with_spinner_message("Preparing wheel metadata")
        with backend.subprocess_runner(runner):
            distinfo_dir = backend.prepare_metadata_for_build_wheel(
                metadata_dir
            )
>>>>>>> back

    return os.path.join(metadata_dir, distinfo_dir)
